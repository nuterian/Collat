var Stream = require("stream.js");

var net = require("net");
var EventEmitter = require('events').EventEmitter;


Client.prototype = new EventEmitter;
function Client(){

	var _this = this;
	var stream = new Stream();

	this.id = null;
	this.name = null;
	var socket = null;
	this.users = {};

	function connect(host, port){
		console.log('connecting'+host+port);
		socket = net.connect(port, host, function(){
			_this.emit('connect');
			send('j', _this.name);
		});
		socket.setEncoding("utf8");

		socket.on('data', function(data){
			
			var commands = stream.retrieve(data);

			commands.forEach(function(cmd){
				if(cmd.t == 'i'){
					var d = cmd.d.split(" ");
					_this.id = d[0];
					_this.name = d[1];
					_this.users[_this.id] = _this.name;
					_this.emit('user_update');
					_this.emit('connected');					
				}
				else if(cmd.t == 'n'){
					var d = cmd.d.split(" ");
					_this.emit('server', {type: 'nick', data: _this.users[d[0]]+" to <strong>"+d[1]+"</strong>"});
					_this.users[d[0]] = d[1];
					_this.emit('user_update');
				}
				else if(cmd.t == 'cll'){
					var users = JSON.parse(cmd.d);
					for(user_id in users){
						_this.users[user_id] = users[user_id];
					}
					_this.emit('user_update');
					
				}
				else if(cmd.t == 'clj'){
					var d = cmd.d.split(" ");
					_this.emit('server', {type: 'user_new', data: d[1]});
					_this.users[d[0]] = d[1];
					_this.emit('user_update');
				}
				else if(cmd.t == 'clq'){
					_this.emit('server', {type: 'user_quit', data: _this.users[cmd.d]});
					delete _this.users[cmd.d];
					_this.emit('user_update');
				}
				else if(cmd.t == 'm'){
					_this.emit('server', {type: 'user_msg', data: { user: { id : cmd.d.id, name : _this.users[cmd.d.id] } , msg: { body: cmd.d.m, time: "6:00pm" } } } );
				}
			});
		});

		socket.on('error', function(){

		})

		socket.on('close', function(){
			_this.users = {};
			_this.emit('disconnect');
			_this.emit('user_update');
		});
	}

	function send(type, data){
		if(type == "nick") type = 'n';
		if(type == "connect") type = 'c';
		if(type == "serve") type = 's';
		
		var m = {t: type, d: data};
		socket.write(JSON.stringify(m)+"\n");
	}

	function close(){
		socket.end();
	}

	this.connect = connect;
	this.send = send;
	this.close = close;
}

module.exports = Client;