var dgram = require('dgram'),
	ifaces = require('os').networkInterfaces(),
	EventEmitter = require('events').EventEmitter;

var addresses = [];
function getAddresses(){
	Object.keys(ifaces).forEach(function(type){
	  ifaces[type].forEach(function(iface){
	    if (iface.family.toLowerCase() == 'ipv4' && iface.address != '127.0.0.1') {
	      addresses.push(iface.address);
	    }
	  });
	});	
}

Scanner.prototype = new EventEmitter;
function Scanner(){
	this.id = process.pid;
	var groups = {};

	var _this = this;
	var port = 23422;
	var interval = 2000;
	var sender = dgram.createSocket('udp4');
	var receiver;

	getAddresses();

	function broadcaster(server){
		var data = {
			topic: server.topic, 
			users: server.clients.length,
			port: server.server.address().port,
			id: _this.id
		};

		var dataBuffer = new Buffer(JSON.stringify(data));
		addresses.forEach(function(addr){
			sender.send(dataBuffer, 0, dataBuffer.length, port, addr, function(err, bytes){});				
		});
	}

	function broadcast(server){
		setInterval( function(){ broadcaster(server) } , interval);
	}

	function scan(){
		receiver = new dgram.createSocket('udp4');
		receiver.on("message", function(data, rinfo){
			console.log("Received: "+data+ " from: "+ rinfo.address);
			var _data = JSON.parse(data);
			if(!groups[_data.id]){
				groups[_data.id] = _data;
				groups[_data.id]["address"] = rinfo.address;
				console.log("NEw found");
				_this.emit("new_group", groups[_data.id]);
			}
		});

		receiver.bind(port);
	}

	function getGroup(id){
		if(groups[id]){
			return groups[id];
		}
		return false;
	}

	function stop(){
		if(receiver._handle){
			receiver.close();
			delete receiver;
			groups = {};
			this.removeAllListeners();			
		}

	}

	function numGroups(){
		return Object.keys(groups).length || 0;
	}

	this.broadcast = broadcast;
	this.scan = scan;
	this.stop = stop;
	this.getGroup = getGroup;
	this.numGroups = numGroups;
}

module.exports = new Scanner();