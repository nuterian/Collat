var Stream = require("stream.js");

var net = require("net");
var EventEmitter = require('events').EventEmitter;

Array.prototype.remove = function(e) {
  for (var i = 0; i < this.length; i++) {
    if (e == this[i]) { return this.splice(i, 1); }
  }
};

function Client(socket){
	this.id = null;
	this.name = null;
	this.socket = socket;
}

var ids = [];
function genId(){
	var id = Math.round(Math.random()*(9876 - 1234) + 1234);
	while(ids.indexOf(id) != -1){
		id = Math.round(Math.random()*(9876 - 1234) + 1234);
	}
	ids.push(id);
	return id;
}

Server.prototype = new EventEmitter;
function Server(){

	var stream = new Stream();
	var _this = this;

	this.clients = [];

	function send(socket, type, data){
		var m = {t: type, d: data};
		socket.write(JSON.stringify(m)+"\n");
	}

	this.server = net.createServer(function (socket) {
		var client = new Client(socket);
		client.id = genId();
		client.name = 'Guest'+client.id;

		socket.setTimeout(0);
		socket.setEncoding("utf8");

		var user_list = {};
		_this.clients.forEach(function(c){
			user_list[c.id] = c.name;
		});

		send(socket, "cll", JSON.stringify(user_list));
		send(socket, "i", client.id);

		_this.clients.push(client);
		_this.emit('connect');

		_this.clients.forEach(function(c){
			if(c != client){
				send(c.socket, "clj", client.id + " " + client.name);
			}
		})

		//var guestId = Math.round(Math.random()*(9999 - 1999) + 1999);
		//while(_this.clients.)

		socket.on('data', function(data){
			var commands = stream.retrieve(data);

			commands.forEach(function(cmd){
				if(cmd.t == 'n'){
					client.name = cmd.d;
					_this.clients.forEach(function(c){
						send(c.socket, 'n', client.id+" "+cmd.d);
					});
					_this.emit('client', client, {type:'nick', data: cmd.d});
				}
				else if(cmd.t == 'm'){
					_this.clients.forEach(function(c){
						send(c.socket, 'm', {id: client.id, m: cmd.d});
					});					
				}
			});
		});
	});
}

/*
var server = net.createServer(function (stream) {
	var client = new Client(stream);
	clients.push(client);

	stream.setTimeout(0);
	stream.setEncoding("utf8");

	console.log("Client connected");
	stream.write("Welcome, enter your username:\n");

  	stream.on("data", function (data) {
  	console.log(data.toString());
    if (client.name == null) {
      client.name = data.match(/\S+/);
      stream.write("===========\n");
      clients.forEach(function(c) {
        if (c != client) {
          c.stream.write(client.name + " has joined.\n");
        }
      });
      return;
    }

    var command = data.match(/^\/(.*)/);
    if (command) {
      if (command[1] == 'users') {
        clients.forEach(function(c) {
          stream.write("- " + c.name + "\n");
        });
      }
      else if (command[1] == 'quit') {
        stream.end();
      }
      return;
    }

    clients.forEach(function(c) {
      if (c != client) {
        c.stream.write(client.name + ": " + data);
      }
    });
  });

  stream.on("end", function() {
    clients.remove(client);

    clients.forEach(function(c) {
      c.stream.write(client.name + " has left.\n");
    });

    stream.end();
  });
});
*/

module.exports = new Server();